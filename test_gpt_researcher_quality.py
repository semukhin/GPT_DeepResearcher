#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π GPT-Researcher
–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ç–µ–º –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å LawGPT
"""

import asyncio
import time
import json
from datetime import datetime
from typing import Dict, List, Any
from pathlib import Path
from dotenv import load_dotenv
import re
load_dotenv()

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
test_results_dir = Path("test_results")
test_results_dir.mkdir(exist_ok=True)

class GPTResearcherQualityTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π GPT-Researcher"""
    
    def __init__(self):
        self.results = []
        self.start_time = None
        self.report_counter = 1
        self.outputs_dir = Path("outputs")
        self.outputs_dir.mkdir(exist_ok=True)
        
    def _sanitize_filename(self, text: str) -> str:
        # –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä, –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–π
        text = re.sub(r'[^\w\s-]', '', text)
        text = re.sub(r'\s+', '_', text)
        return text[:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É

    def save_report(self, report: str, query: str, report_type: str):
        print(f"[DEBUG] –î–ª–∏–Ω–∞ –æ—Ç—á—ë—Ç–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º: {len(report)} —Å–∏–º–≤–æ–ª–æ–≤")
        filename = f"report_{self.report_counter}_{self._sanitize_filename(query)}_{report_type}.md"
        filepath = self.outputs_dir / filename
        with open(filepath, "w", encoding="utf-8") as f:
            f.write(report)
        print(f"üìù –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filepath}")
        self.report_counter += 1

    async def test_basic_research(self, query: str, report_type: str = "research_report") -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"""
        try:
            from gpt_researcher import GPTResearcher
            from gpt_researcher.utils.enum import Tone
            
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: {query}")
            print(f"üìã –¢–∏–ø –æ—Ç—á–µ—Ç–∞: {report_type}")
            
            start_time = time.time()
            # –£—Å–∏–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
            system_prompt = (
                "–í–ê–ñ–ù–û: –í—Å–µ –æ—Ç–≤–µ—Ç—ã, –ø–æ—è—Å–Ω–µ–Ω–∏—è, –≤—ã–≤–æ–¥—ã –∏ —Å—Å—ã–ª–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
                "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –∑–∞–∫–æ–Ω—ã –∏ —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–º–µ–Ω–∏–º–æ."
            )
            ru_query = f"{query}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ—Ç—á—ë—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
            researcher = GPTResearcher(
                query=ru_query,
                report_type=report_type,
                tone=Tone.Objective,
                headers={"system": system_prompt}
            )
            # –Ø–≤–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å Gemini 2.5 Flash (google_genai:gemini-2.5-flash)
            researcher.cfg.smart_llm_provider = "google_genai"
            researcher.cfg.smart_llm_model = "gemini-2.5-flash"  # Gemini 2.5 Flash
            # –ü—Ä–æ–≤–æ–¥–∏–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
            context = await researcher.conduct_research()
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
            report = await researcher.write_report()
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç
            self.save_report(report, query, report_type)
            end_time = time.time()
            duration = end_time - start_time
            
            # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            sources = researcher.get_research_sources()
            visited_urls = researcher.get_source_urls()
            costs = researcher.get_costs()
            
            result = {
                "query": query,
                "report_type": report_type,
                "duration_seconds": duration,
                "context_length": len(context),
                "report_length": len(report),
                "sources_count": len(sources),
                "visited_urls_count": len(visited_urls),
                "costs": costs,
                "report_preview": report[:500] + "..." if len(report) > 500 else report,
                "sources": sources[:5],  # –ü–µ—Ä–≤—ã–µ 5 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                "visited_urls": list(visited_urls)[:5],  # –ü–µ—Ä–≤—ã–µ 5 URL
                "timestamp": datetime.now().isoformat(),
                "success": True
            }
            
            print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(sources)}, URL: {len(visited_urls)}")
            print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${costs:.4f}")
            print(f"üìù –î–ª–∏–Ω–∞ –æ—Ç—á–µ—Ç–∞: {len(report)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            return {
                "query": query,
                "report_type": report_type,
                "error": str(e),
                "timestamp": datetime.now().isoformat(),
                "success": False
            }
    
    async def test_deep_research(self, query: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"""
        try:
            from gpt_researcher import GPTResearcher
            from gpt_researcher.utils.enum import Tone
            
            print(f"\nüî¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {query}")
            
            start_time = time.time()
            system_prompt = (
                "–í–ê–ñ–ù–û: –í—Å–µ –æ—Ç–≤–µ—Ç—ã, –ø–æ—è—Å–Ω–µ–Ω–∏—è, –≤—ã–≤–æ–¥—ã –∏ —Å—Å—ã–ª–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
                "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –∑–∞–∫–æ–Ω—ã –∏ —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–º–µ–Ω–∏–º–æ."
            )
            ru_query = f"{query}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ—Ç—á—ë—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
            researcher = GPTResearcher(
                query=ru_query,
                report_type="deep",  # –†–µ–∂–∏–º –≥–ª—É–±–æ–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
                tone=Tone.Objective,
                headers={"system": system_prompt}
            )
            # –Ø–≤–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å Gemini 2.5 Flash (google_genai:gemini-2.5-flash)
            researcher.cfg.smart_llm_provider = "google_genai"
            researcher.cfg.smart_llm_model = "gemini-2.5-flash"  # Gemini 2.5 Flash
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–ª—É–±–æ–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            researcher.cfg.deep_research_breadth = 3
            researcher.cfg.deep_research_depth = 2
            researcher.cfg.deep_research_concurrency = 2
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            def on_progress(progress):
                print(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: –ì–ª—É–±–∏–Ω–∞ {progress.current_depth}/{progress.total_depth}, "
                      f"–®–∏—Ä–∏–Ω–∞ {progress.current_breadth}/{progress.total_breadth}, "
                      f"–ó–∞–ø—Ä–æ—Å—ã {progress.completed_queries}/{progress.total_queries}")
                if progress.current_query:
                    print(f"üîç –¢–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å: {progress.current_query}")
            
            # –ü—Ä–æ–≤–æ–¥–∏–º –≥–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
            context = await researcher.conduct_research(on_progress=on_progress)
            print(f"[DEBUG] Context for deep research: {context}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
            report = await researcher.write_report()
            print(f"[DEBUG] Report for deep research: {report[:500]}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç
            self.save_report(report, query, "deep_research")
            
            end_time = time.time()
            duration = end_time - start_time
            
            # –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            sources = researcher.get_research_sources()
            visited_urls = researcher.get_source_urls()
            costs = researcher.get_costs()
            
            result = {
                "query": query,
                "report_type": "deep_research",
                "duration_seconds": duration,
                "context_length": len(context),
                "report_length": len(report),
                "sources_count": len(sources),
                "visited_urls_count": len(visited_urls),
                "costs": costs,
                "report_preview": report[:500] + "..." if len(report) > 500 else report,
                "sources": sources[:5],
                "visited_urls": list(visited_urls)[:5],
                "timestamp": datetime.now().isoformat(),
                "success": True
            }
            
            print(f"‚úÖ –ì–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
            print(f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(sources)}, URL: {len(visited_urls)}")
            print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${costs:.4f}")
            
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª—É–±–æ–∫–æ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏: {str(e)}")
            return {
                "query": query,
                "report_type": "deep_research",
                "error": str(e),
                "timestamp": datetime.now().isoformat(),
                "success": False
            }
    
    async def run_legal_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã —Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º–∏ —Ç–µ–º–∞–º–∏"""
        print("üèõÔ∏è –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞ GPT-Researcher –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ç–µ–º")
        print("=" * 80)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        legal_queries = [
            "–ü–µ—Ä–µ–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Å–Ω–æ–≤–∞–Ω–∏–π —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞ –ø–æ–¥—Ä—è–¥–∞ —Å 715 –Ω–∞ 717 —Å—Ç–∞—Ç—å—é –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ –∫–æ–¥–µ–∫—Å–∞ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏"
        ]
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        print("\nüìã –¢–ï–°–¢ 1: –ë–∞–∑–æ–≤—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
        print("-" * 40)
        
        for query in legal_queries[:2]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2 –∑–∞–ø—Ä–æ—Å–∞
            result = await self.test_basic_research(query, "research_report")
            self.results.append(result)
            await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
        print("\nüìã –¢–ï–°–¢ 2: –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã")
        print("-" * 40)
        
        for query in legal_queries[2:3]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º 3-–π –∑–∞–ø—Ä–æ—Å
            result = await self.test_basic_research(query, "detailed_report")
            self.results.append(result)
            await asyncio.sleep(2)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        print("\nüìã –¢–ï–°–¢ 3: –ì–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")
        print("-" * 40)
        
        deep_query = legal_queries[0]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        result = await self.test_deep_research(deep_query)
        self.results.append(result)
    
    async def run_general_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—â–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        print("\nüåê –¢–ï–°–¢ 4: –û–±—â–∏–µ —Ç–µ–º—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        print("-" * 40)
        
        general_queries = [
            "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞",
            "–ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —ç–∫–æ–Ω–æ–º–∏–∫—É"
        ]
        
        for query in general_queries:
            result = await self.test_basic_research(query, "research_report")
            self.results.append(result)
            await asyncio.sleep(2)
    
    def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = test_results_dir / f"gpt_researcher_test_results_{timestamp}.json"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        summary = {
            "total_tests": len(self.results),
            "successful_tests": len([r for r in self.results if r.get("success", False)]),
            "failed_tests": len([r for r in self.results if not r.get("success", False)]),
            "total_duration": sum([r.get("duration_seconds", 0) for r in self.results if r.get("success", False)]),
            "total_costs": sum([r.get("costs", 0) for r in self.results if r.get("success", False)]),
            "average_report_length": sum([r.get("report_length", 0) for r in self.results if r.get("success", False)]) / max(1, len([r for r in self.results if r.get("success", False)])),
            "test_timestamp": datetime.now().isoformat()
        }
        
        output = {
            "summary": summary,
            "results": self.results
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(output, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìä –ö–†–ê–¢–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {summary['successful_tests']}/{summary['total_tests']}")
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {summary['total_duration']:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${summary['total_costs']:.4f}")
        print(f"üìù –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ—Ç—á–µ—Ç–∞: {summary['average_report_length']:.0f} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return filename

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ GPT-Researcher")
    print("=" * 80)
    
    tester = GPTResearcherQualityTester()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã
        await tester.run_legal_tests()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—â–∏–µ —Ç–µ—Å—Ç—ã
        await tester.run_general_tests()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_file = tester.save_results()
        
        print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: {results_file}")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if tester.results:
            tester.save_results()

if __name__ == "__main__":
    asyncio.run(main()) 